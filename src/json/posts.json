[
    {
        "id": 1,
        "titulo": "Aguilar Studies",
        "texto": "Bem-vindo(a) ao Aguilar-studies: Revolucionando a Organização dos Seus Estudos com React e Typescript\n\n![Aguilar-studies](https://exemplo.com/caminho/para/imagem.png)\n\nO **Aguilar-studies** é uma ferramenta inovadora desenvolvida com React e Typescript, projetada para tornar o processo de organização dos seus estudos mais eficiente e produtivo. Neste projeto, mergulhamos na criação de um aplicativo web que possibilita aos usuários cadastrar temas de estudo, definir o tempo alocado para cada tópico e iniciar a contagem de estudos. Vamos explorar como este aplicativo foi desenvolvido e como ele pode transformar a maneira como você estuda.\n\n## Desenvolvendo com Create React App e Typescript\n\nO **Aguilar-studies** é construído sobre a base sólida do **Create React App**, uma ferramenta que nos fornece uma estrutura robusta para criar aplicativos React sem a preocupação com complexas configurações iniciais. A adição do **Typescript** ao projeto proporciona um código mais seguro e robusto, com tipagem estática que auxilia na prevenção de erros comuns.\n\n## Componentização, Props e State - Fundamentos do React\n\nAo desenvolver o **Aguilar-studies**, aplicamos os fundamentos essenciais do React. Utilizamos a **componentização** para dividir a interface em componentes reutilizáveis e independentes. A passagem de **props** entre esses componentes assegura uma comunicação eficaz entre diferentes partes do aplicativo. Além disso, exploramos o uso do **estado (state)** para gerenciar informações dinâmicas, como os temas de estudo cadastrados e o tempo alocado para cada um.\n\n## CSS Modules para Estilos Isolados\n\nEvitar conflitos e sobreposições de estilos é fundamental para manter uma experiência de usuário coesa. No **Aguilar-studies**, empregamos **CSS Modules** para garantir que os estilos aplicados em um componente não afetem outros componentes. Com essa abordagem, cada componente possui seu próprio escopo isolado de estilos, prevenindo conflitos indesejados.\n\n## Hooks useState e useEffect - Modernizando a Gestão de Estado\n\nOs hooks **useState** e **useEffect**, recursos poderosos introduzidos no React, revolucionaram a maneira como gerenciamos estado e efeitos colaterais. No **Aguilar-studies**, incorporamos esses hooks para manter o estado do aplicativo sincronizado com as ações do usuário. O **useState** permite a criação e atualização do estado local de forma simples, enquanto o **useEffect** lida com efeitos colaterais, como chamadas à API, de maneira elegante.\n\n## Código Limpo e Documentado com Boas Práticas\n\nDesenvolver código limpo e bem documentado é essencial para a manutenção e colaboração eficazes. No projeto **Aguilar-studies**, adotamos princípios de boas práticas de programação, como o **DRY (Don't Repeat Yourself)** e o **SRP (Single Responsibility Principle)**. Isso resultou em um código mais legível, modular e fácil de entender. Comentários e documentação clara foram incorporados para facilitar a colaboração e a manutenção futura.\n\n## Publicação na Vercel - Compartilhando Seus Estudos com o Mundo\n\nApós o desenvolvimento do **Aguilar-studies**, chegou o momento de compartilhar esse incrível aplicativo com o mundo. Utilizamos a plataforma **Vercel** para publicar o aplicativo de maneira ágil e direta. A Vercel possibilita a hospedagem eficiente de aplicativos React, garantindo que os usuários possam acessar e utilizar o **Aguilar-studies** com facilidade.\n\n## Conclusão\n\nO **Aguilar-studies** transcende a simples organização de estudos; é uma ferramenta que combina os princípios do React com a eficiência do Typescript para proporcionar uma experiência aprimorada aos usuários que desejam otimizar a produtividade nos estudos. Ao desenvolver este projeto, mergulhamos na criação de componentes reutilizáveis, na gestão de estado por meio de hooks modernos e na manutenção de um código limpo e documentado. O **Aguilar-studies** exemplifica como a tecnologia pode transformar a abordagem dos nossos objetivos educacionais, capacitando-nos a alcançar novos patamares de aprendizado e eficiência.",
        "codigo": "https://github.com/LucasSAguilar/aguilar_studies",
        "pagina": "https://aguilar-studies.vercel.app"
          
    },
    {
        "id": 2,
        "titulo": "Organa",
        "texto": "Prepare-se para mergulhar no mundo poderoso do React com o projeto **\"Organa\"**. Nesta aventura empolgante, desenvolvida durante um curso da Alura, explorei as vantagens do React e sua capacidade de criar interfaces reativas e eficientes. Neste artigo, compartilharei detalhes sobre o projeto **\"Organa\"**, como ele foi concebido, suas funcionalidades, e como utilizei as principais características do React para proporcionar uma experiência intuitiva para os usuários.\n\n## Vantagens do React - Potencializando o \"Organa\"\n\nO **\"Organa\"** foi concebido com o objetivo de criar uma ferramenta eficiente para a organização de equipes. A utilização do React foi fundamental para alcançar esse objetivo. As vantagens do React, como a criação de componentes reativos e a manipulação eficiente do VirtualDOM, proporcionaram uma interface de usuário responsiva e de alto desempenho. O fluxo unidirecional de dados (one-way data binding) e a capacidade de refatorar e evoluir os componentes de acordo com as necessidades do projeto foram cruciais para a criação de um organizador de equipes versátil e escalável.\n\n## Prototipando e Clonando - Da Ideia ao Deploy\n\nA jornada do **\"Organa\"** começou com prototipação, onde visualizei a aplicação do zero. Aprendi a clonar um projeto existente no GitHub, instalando as dependências necessárias para rodar o código. Essa abordagem ágil permitiu que eu começasse a construir a aplicação com rapidez e eficiência. Ao longo do desenvolvimento, pude comparar a visão do React sobre cada componente, bem como seus props e states, fornecendo uma compreensão mais profunda sobre o funcionamento interno do projeto.\n\n## Funcionalidades do \"Organa\" - Organização Intuitiva de Equipes\n\nO **\"Organa\"** se destaca como um organizador de equipes completo e intuitivo. Os usuários podem criar times e cadastrar membros em cada equipe. A funcionalidade de personalização de cores para cada time proporciona uma experiência visual atraente e permite que os usuários personalizem seus espaços de trabalho.\n\nA implementação de componentes reativos no **\"Organa\"** permite que as alterações sejam refletidas em tempo real, garantindo uma experiência suave e responsiva. Através do VirtualDOM, o React gerencia eficientemente as mudanças na interface, tornando o **\"Organa\"** uma aplicação rápida e eficiente.\n\n## Opinião Pessoal - Eficiência e Satisfação\n\nO desenvolvimento do **\"Organa\"** foi uma jornada gratificante, onde pude experimentar em primeira mão a potência do React em criar interfaces de usuário altamente eficientes. A aplicação do fluxo unidirecional de dados e a capacidade de refatorar o código à medida que o projeto evoluía foram aspectos particularmente enriquecedores. Além disso, a criação de um projeto tão útil e intuitivo, como o **\"Organa\"**, me enche de satisfação ao saber que ele pode ser utilizado para facilitar a organização e colaboração entre equipes.\n\n## Conclusão\n\nO **\"Organa\"** é a prova viva do poder e eficiência do React na criação de interfaces reativas e intuitivas. Com suas vantagens, como componentes reativos, manipulação eficiente do VirtualDOM e fluxo unidirecional de dados, o React permitiu que eu desenvolvesse um organizador de equipes eficiente e escalável.\n\nEssa jornada pelo mundo do React foi empolgante e reveladora, expandindo minha compreensão das capacidades do desenvolvimento front-end. O **\"Organa\"** é uma prova de que o React continua sendo uma escolha sólida para criar interfaces modernas, intuitivas e eficientes para aplicações web.",
        "codigo": "https://github.com/LucasSAguilar/Organa_times",
        "pagina":"https://organa-times.vercel.app"
    },
    {
        "id": 3,
        "titulo": "Pumpkin Run",
        "texto": "Bem-vindo(a) ao emocionante mundo do Pumpkin Run!\n\n![Pumpkin Run](https://exemplo.com/caminho/para/imagem.png)\n\nO Pumpkin Run é um dos meus primeiros projetos em JavaScript que me introduziu ao desenvolvimento web. Neste jogo inspirado no famoso jogo do dinossauro do Google, os jogadores precisam guiar o personagem principal para desviar dos caçadores que aparecem na tela. Prepare-se para uma jornada endless runner cheia de sustos e desafios!\n\n## Conceito e Estilo Endless Runner\n\nO Pumpkin Run segue o estilo clássico de endless runner, onde o objetivo é sobreviver o máximo possível, acumulando pontos à medida que o personagem avança pela tela. A inspiração veio do icônico jogo do dinossauro do Google, mas com uma abordagem temática mais assustadora e envolvente. O desafio é manter o personagem longe dos caçadores, evitando colisões que encerram o jogo.\n\n## Desenvolvimento Inicial - Aprendizado com HTML, CSS e JS\n\nO Pumpkin Run surgiu como um dos meus primeiros projetos ao iniciar meus estudos em desenvolvimento web. Ele foi desenvolvido com HTML, CSS e JavaScript, o que me permitiu aprender os fundamentos dessas linguagens e começar a aplicá-los para criar uma experiência interativa na web.\n\n## A Gameplay e a Magia das Ações do Jogador\n\nO controle do personagem é simples e eficiente, permitindo que os jogadores pulem ou deslizem para evitar os caçadores. Ao clicar, pressionar a tecla de espaço ou deslizar o dedo para baixo (em dispositivos móveis), o personagem realiza um pulo ou slide, adicionando uma camada de estratégia e diversão à gameplay. A sincronização dos movimentos do personagem com as ações do jogador torna o Pumpkin Run envolvente e empolgante.\n\n## Desafios Crescentes e Aumento de Velocidade\n\nÀ medida que a pontuação do jogador aumenta, a velocidade da tela também aumenta progressivamente. Esse desafio progressivo mantém os jogadores envolvidos e testa suas habilidades de reação. A velocidade crescente cria uma tensão constante, incentivando os jogadores a superarem seus próprios recordes e alcançarem novas distâncias.\n\n## Atravessando a Tela e Gerando Inimigos\n\nPara aprimorar a experiência do Pumpkin Run, os inimigos (caçadores) são gerados aleatoriamente, mantendo a jogabilidade dinâmica e emocionante. Os jogadores precisam estar alertas e reagir rapidamente para desviar dos caçadores que aparecem no caminho. A criação dinâmica de inimigos torna cada partida única e imprevisível.\n\n## Resultado Final e Desafios Futuros\n\nO Pumpkin Run se tornou uma experiência de aprendizado incrível para mim, mostrando a força do HTML, CSS e JavaScript para criar jogos interativos na web. Embora seja um dos meus primeiros projetos, o Pumpkin Run ainda é um marco significativo na minha jornada como desenvolvedor.\n\nPara o futuro, pretendo continuar melhorando e expandindo o Pumpkin Run. Novas mecânicas de gameplay, gráficos aprimorados e desafios adicionais podem ser incorporados para tornar o jogo ainda mais emocionante e atraente para os jogadores.\n\n## Conclusão\n\nO Pumpkin Run é um projeto que me introduziu ao mundo do desenvolvimento web e me apresentou os conceitos de jogos interativos na web. Com seu estilo endless runner envolvente e temática de sustos, o Pumpkin Run oferece uma experiência emocionante e desafiadora para os jogadores. Através do desenvolvimento deste projeto, aprendi os fundamentos do HTML, CSS e JavaScript e comecei a aplicar essas habilidades para criar uma experiência de jogo única e cativante.\n\nNão deixe de experimentar o Pumpkin Run e mergulhar nesta emocionante jornada endless runner!",
        "codigo": "https://github.com/LucasSAguilar/pumpkin_run",
        "pagina":"https://lucassaguilar.github.io/pumpkin_run/"
    },
    {
        "id": 4,
        "titulo": "Aguilar Space",
        "texto": "Bem-vindo ao **\"Aguilar-Space\"**, uma emocionante galeria digital do universo desenvolvida em React durante o curso da Alura. Neste projeto solitário, mergulhei fundo no espaço front-end, explorando conceitos avançados e criando uma experiência visualmente encantadora. Neste artigo, compartilharei detalhes sobre o desenvolvimento, funcionalidades, tecnologias utilizadas e minha opinião sobre essa jornada estelar.\n\n## Desvendando o Espaço Front-End - Aprendizado e Desenvolvimento\nO **\"Aguilar-Space\"** surgiu como parte do meu aprendizado em desenvolvimento web. Ao participar do curso da Alura, fui guiado em uma jornada pelos fundamentos do React, incluindo a organização de pastas e arquivos do projeto, a implementação de componentes de Interface do Usuário e o tratamento de arquivos estáticos. Também aprendi a utilizar o poder do CSS modules e do Sass para criar estilos robustos e flexíveis. Além disso, explorei a utilização de métodos JavaScript para adicionar funcionalidades interativas à página. Concluindo o ciclo, o deploy da aplicação na Vercel permitiu que o **\"Aguilar-Space\"** ganhasse vida no mundo digital.\n\n## O Encanto do Espaço Visual - UI e UX Design\nA estética do **\"Aguilar-Space\"** foi meticulosamente trabalhada para oferecer uma experiência única. Com um tema que exalta o universo, o UI e UX design foram cruciais para criar uma experiência envolvente. O layout responsivo permite que os visitantes explorem o cosmos em qualquer dispositivo, proporcionando uma navegação suave e agradável. A busca por tags específicas permitiu uma exploração personalizada, permitindo aos usuários descobrirem elementos celestes que mais lhes interessam.\n\n## Desvendando os Segredos do **\"Aguilar-Space\"**\nO funcionamento do **\"Aguilar-Space\"** é tão intrigante quanto o próprio espaço. O projeto simula uma galeria digital onde os visitantes podem explorar imagens de estrelas, espaço, planetas e outros elementos fascinantes. Utilizando a funcionalidade de filtragem por tags, os usuários podem navegar pela vastidão do universo de acordo com suas preferências.\n\nO componente \"Galeria\" desempenha um papel crucial nessa exploração. Por meio dele, é possível visualizar as imagens do cosmos e filtrá-las com base em tags específicas, proporcionando uma experiência dinâmica e interativa.\n\nO \"Menu\" é a bússola que guia os visitantes nessa jornada espacial, oferecendo uma navegação intuitiva pelas diferentes áreas da galeria digital.\n\n## Do Desenvolvimento à Publicação\nApós mergulhar em conceitos complexos do espaço front-end, o **\"Aguilar-Space\"** tomou forma e foi publicado na web. Através do deployment na Vercel, a galeria digital ganhou vida, alcançando usuários de todo o mundo.\n\n## Opinião Pessoal - Uma Jornada Memorável\nO **\"Aguilar-Space\"** foi uma jornada memorável de aprendizado e desenvolvimento. Através deste projeto solo, tive a oportunidade de aplicar habilidades técnicas e aprimorar minha compreensão do desenvolvimento web. O tema espacial trouxe um toque único à experiência, incentivando minha paixão por criar projetos que combinem tecnologia e criatividade.\n\n## Conclusão\nO **\"Aguilar-Space\"** é muito mais do que uma galeria digital sobre o universo - é uma viagem pelo mundo do desenvolvimento front-end. O projeto proporcionou uma experiência valiosa, permitindo que eu explorasse a interseção entre o espaço e o código. Através do React e de conceitos avançados, aprendi a criar interfaces atraentes e interativas que cativam os usuários.\n\nEsta jornada pelo espaço front-end expandiu meus horizontes e me inspirou a continuar buscando novos desafios e projetos inovadores. O universo da programação é vasto, e estou ansioso para continuar explorando e expandindo meu conhecimento neste fascinante mundo digital.",
        "codigo": "https://github.com/LucasSAguilar/aguilar-space",
        "pagina":"https://aguilar-space.vercel.app"
    },
    {
        "id": 5,
        "titulo": "Cartão Azul",
        "texto": "# O \"Cartão Azul\": Tecnologia com Impacto Social\n\n![Cartão Azul](https://exemplo.com/caminho/para/imagem.png)\n\nO **\"Cartão Azul\"** vai além de ser um simples aplicativo de desktop; é uma ferramenta de impacto social desenvolvida com dedicação para a Assistência Social da cidade de Santa Rita do Passa Quatro. Neste projeto, exploramos as tecnologias HTML, CSS, JS, Electron, SQLite e NodeJS para criar um sistema que visa agilizar e controlar a emissão de documentos essenciais para pessoas com Transtorno do Espectro Autista (TEA), proporcionando um acesso simplificado a serviços cruciais. Vamos mergulhar na jornada técnica por trás desse aplicativo significativo e entender como ele está causando um impacto positivo na comunidade.\n\n## Tecnologias por Trás do Cartão Azul\n\nO **\"Cartão Azul\"** é a combinação de várias tecnologias que se unem para servir a uma causa nobre:\n\n- **HTML, CSS e JS:** A base da interface do usuário é construída com HTML para a estrutura, CSS para a estilização visual e JS para a interatividade. Essas tecnologias essenciais proporcionam uma experiência amigável aos usuários do sistema.\n\n- **Electron:** O uso do Electron é fundamental para transformar o aplicativo em uma aplicação desktop multiplataforma. Ele permite empacotar o aplicativo web como um executável, tornando-o acessível e utilizável sem a necessidade de um navegador.\n\n- **SQLite:** O SQLite é um sistema de gerenciamento de banco de dados leve e incorporado. No **\"Cartão Azul\"**, o SQLite é utilizado para armazenar os dados dos usuários, documentos e outras informações relevantes de maneira eficiente e acessível.\n\n- **NodeJS:** A integração do NodeJS permite a criação de um servidor local que gerencia as solicitações e respostas do aplicativo. Ele trabalha em conjunto com o Electron para fornecer uma experiência fluida e responsiva.\n\n## Documentação e Acessibilidade\n\nA criação de documentações claras e acessíveis é fundamental para garantir que o **\"Cartão Azul\"** seja utilizado de forma eficaz. Um conjunto de guias e manuais foi desenvolvido para explicar passo a passo como utilizar o aplicativo, desde o processo de instalação até a emissão dos documentos. Essas documentações são cruciais para capacitar os usuários e garantir que eles possam aproveitar ao máximo os recursos oferecidos pelo sistema.\n\n## Produção de Imagens e Design\n\nAlém da parte técnica, o projeto do **\"Cartão Azul\"** também envolveu a produção de imagens e design. Ferramentas como Photoshop e Canva foram utilizadas para criar recursos visuais, incluindo logotipos, ícones e elementos de design que refletissem a natureza séria e amigável do aplicativo.\n\n## Impacto na Comunidade e Agradecimento\n\nO **\"Cartão Azul\"** transcende o mundo da tecnologia e assume um papel significativo na sociedade. Ao agilizar e facilitar a emissão de documentos para pessoas com TEA, o aplicativo contribui diretamente para melhorar o acesso a serviços e oportunidades. Expressamos nosso sincero agradecimento à Assistência Social de Santa Rita do Passa Quatro pela oportunidade de colaborar nesse projeto valioso.\n\n## Conclusão\n\nO **\"Cartão Azul\"** é um testemunho poderoso do potencial da tecnologia para o bem social. A combinação de tecnologias como HTML, CSS, JS, Electron, SQLite e NodeJS resultou em um aplicativo de desktop acessível e funcional que está fazendo a diferença nas vidas de pessoas com TEA. Além disso, a dedicação à documentação, design e produção de imagens demonstra um compromisso completo com a causa. O **\"Cartão Azul\"** prova que a tecnologia, quando usada com propósito, pode ser uma força transformadora na comunidade.",
        "codigo": "",
        "pagina":""
    },
    {
        "id": 6,
        "titulo": "Consumo de API - VIA CEP",
        "texto": "Imagine um formulário de cadastro que, ao inserir o CEP, automaticamente preenche os campos de endereço. Esse é um cenário bem comum em diversos sites e aplicativos, e a mágica por trás disso é possível graças às APIs. Neste post, vamos explorar a API Via CEP, entender sua importância e como ela foi utilizada em um projeto que visa simplificar a coleta de informações de endereço.\n\n## APIs: Descomplicando a Tecnologia\n\nAPI, ou Interface de Programação de Aplicativos, é uma maneira pela qual diferentes sistemas podem se comunicar e interagir uns com os outros. Pense nisso como uma janela por onde os programas podem solicitar e receber dados de outros sistemas sem necessariamente entender os detalhes internos. É como se você encomendasse algo em um restaurante, sem precisar saber como os ingredientes são preparados.\n\n## API Via CEP: Agilizando o Preenchimento de Endereços\n\nA API Via CEP é uma dessas interfaces que fornece informações de endereço a partir de um CEP. Imagine preencher manualmente todos os campos de endereço em um formulário sempre que você precisa se cadastrar em algum serviço online. A API Via CEP existe para simplificar essa tarefa. Basta fornecer o CEP e, em troca, você recebe todos os detalhes, como logradouro, cidade e estado.\n\n## Projeto: Formulário de Endereço Inteligente\n\nDesenvolvi um projeto que utiliza a API Via CEP para aprimorar a experiência do usuário em um formulário de endereço. Através de HTML, CSS e JavaScript, criei uma interface amigável onde o primeiro campo solicita o CEP. Ao preencher e sair desse campo, a API é acionada, recuperando automaticamente as informações de endereço e preenchendo os campos restantes.\n\n```javascript\n// Exemplo de uso do método de busca na API Via CEP\nasync function buscarEndereco(cep) {\n    try {\n        var consultaCEP = await fetch(`https://viacep.com.br/ws/${cep}/json/`);\n        var consultaCEPFormatada = await consultaCEP.json();\n\n        if (consultaCEPFormatada.erro) {\n            throw Error('CEP não encontrado');\n        } else {\n            // Preenche campos automaticamente\n            console.log(consultaCEPFormatada);\n            var cidade = document.getElementById('cidade');\n            var endereco = document.getElementById('endereco');\n            var estado = document.getElementById('estado');\n\n            cidade.value = consultaCEPFormatada.localidade;\n            endereco.value = consultaCEPFormatada.logradouro;\n            estado.value = consultaCEPFormatada.uf;\n        }\n    } catch (erro) {\n        console.log(erro);\n        erroEscrito.innerHTML = '<p>CEP não encontrado</p>';\n    }\n}\n\n// Adiciona evento para buscar endereço ao sair do campo CEP\nvar inputCep = document.getElementById('cep');\ninputCep.addEventListener('focusout', () => {\n    buscarEndereco(inputCep.value);\n});\n ```   \n## Conclusão\n\nA API Via CEP é um excelente exemplo de como a tecnologia pode simplificar processos. Ao automatizar o preenchimento de endereços, ela economiza tempo e reduz a possibilidade de erros. Meu projeto demonstra como essa API pode ser usada em um contexto real para melhorar a experiência dos usuários em formulários de cadastro. Combinando HTML, CSS e JavaScript, o formulário se torna mais intuitivo e eficiente, tornando a interação dos usuários com o site mais agradável.\n\nEm resumo, a API Via CEP é um exemplo brilhante de como a tecnologia pode ser empregada para facilitar tarefas cotidianas e aprimorar a experiência dos usuários na web. É uma demonstração tangível de como a colaboração entre diferentes sistemas pode gerar resultados positivos e práticos para todos.",
        "codigo": "https://github.com/LucasSAguilar/consumo_API_VIACEP/tree/master",
        "pagina":"https://lucassaguilar.github.io/consumo_API_VIACEP/"
    }
]